## Write the following functions:
  
# 1.makeCacheMatrix: This function creates a special "matrix" object that can cache 
# its inverse.
# makeCacheMatrix(): creates a special "matrix" object that can cache its inverse
# set(): set the value of the matrix
# get(): get the value of the matrix
# set_inv_matrix(): set the value of the inverse
# get_inv_matrix(): get the value of the inverse

makeCacheMatrix <- function(x = matrix()) {
  inv_m <- NULL
  set <- function(y) {
    x <<- y
  }
  get <- function() x
  set_inv_matrix <- function(inversematrix) inv_matrix <<- inversematrix
  get_inv_matrix <- function() inv_matrix
  list(set = set, get = get,
       set_inv_matrix = set_inv_matrix,
       get_inv_matrix = get_inv_matrix)
}


# 2. cacheSolve: This function computes the inverse of the special "matrix" returned 
# by makeCacheMatrix above. If the inverse has already been calculated 
# (and the matrix has not changed), then the cachesolve should retrieve the 
# inverse from the cache.

cachesolve <- function(x, ...) {
  inv_matrix <- x$get_inv_matrix()
  if(!is.null(get_inv_matrix)) {
    message("getting cached data")
    return(inv_matrix)
  }
  data <- x$get()
  inv_matrix <- solve(data)
  x$set_inv_matrix(inv_matrix)
  inv_matrix
}
