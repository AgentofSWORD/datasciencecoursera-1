## Write the following functions:

# 1.makeCacheMatrix: This function creates a special "matrix" object that can cache 
# its inverse.
# makeCacheMatrix(): creates a special "matrix" object that can cache its inverse
# set(): set the value of the matrix
# get(): get the value of the matrix
# set_inv_matrix(): set the value of the inverse
# get_inv_matrix(): get the value of the inverse

makeCacheMatrix <- function(x = numeric()) {
  m <- null
  set <- function(y) {
    x <<- y
    inv <- NULL
  }
  get <- function() x
  setinverse <- function(inverse) inv <<- inverse
  getinvesre <- function() inv
  list(set = set, get = get,
       setinverse = setinverse,
       getinverse = getinverse)
}


# 2. cacheSolve: This function computes the inverse of the special "matrix" returned 
# by makeCacheMatrix above. If the inverse has already been calculated 
# (and the matrix has not changed), then the cachesolve should retrieve the 
# inverse from the cache.

cachesolve <- function(x, ...) {
  m <- x$getinverse()
  if(!is.null(inv)) {
    message("getting cached data")
    return(inv)
  }
  data <- x$get()
  inv <- solve(data, ...)
  x$setinverse(inv)
  inv
}


# Trying to see if the function worked or not
sMatrix <- makeCacheMatrix(matrix(c(9, 18, 27, 36), nrow = 2))
sMatrix$get()
sMatrix$inv ## getting the null value of invesre
## Using this function to see if that works or not

cachesolve(sMatrix)
sMatrix$getinverse

